trigger:
- cach

variables:
  dockerImageName: 'todo-app'
  tag: '$(Build.BuildId)'
  DOCKER_BUILDKIT: 1

stages:
- stage: Build
  displayName: Build and Push
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DockerInstaller@0
      displayName: 'Install Docker'
    
    # More reliable Docker login with error handling
    - script: |
        docker buildx version || docker buildx install
        docker buildx create --use
        
        # Secure Docker login with error handling
        echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
        if [ $? -ne 0 ]; then
          echo "##vso[task.logissue type=error]Docker login failed"
          exit 1
        fi
      displayName: 'Setup Buildx and Login'
      env:
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
        DOCKER_USERNAME: $(DOCKER_USERNAME)
    
    # Cache task (correct syntax)
    - task: Cache@2
      displayName: 'Cache yarn packages'
      inputs:
        key: 'yarn | "$(Agent.OS)" | yarn.lock'
        restoreKeys: |
          yarn | "$(Agent.OS)"
        path: '$(Pipeline.Workspace)/.yarn'
    
    - script: |
        if [ -d "$(Pipeline.Workspace)/.yarn" ]; then
          mkdir -p node_modules
          cp -r $(Pipeline.Workspace)/.yarn/cache node_modules/
        fi
      displayName: 'Restore yarn cache'
    
    - script: |
        docker buildx build \
          --push \
          --cache-from type=registry,ref=$(DOCKER_USERNAME)/$(dockerImageName):buildcache \
          --cache-to type=registry,ref=$(DOCKER_USERNAME)/$(dockerImageName):buildcache,mode=max \
          -t $(DOCKER_USERNAME)/$(dockerImageName):$(tag) \
          -t $(DOCKER_USERNAME)/$(dockerImageName):latest \
          .
      displayName: 'Build and Push'
      env:
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
        DOCKER_USERNAME: $(DOCKER_USERNAME)

- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  jobs:
  - job: Deploy
    steps:
    - script: |
        echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
        docker run -d -p 90:80 $(DOCKER_USERNAME)/$(dockerImageName):latest
      displayName: 'Run Container'
      env:
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
        DOCKER_USERNAME: $(DOCKER_USERNAME)
