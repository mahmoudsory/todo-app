trigger:
- main  # Trigger the pipeline on changes to the main branch

variables:
  DOCKER_REPO: 'mahmoudalsory/todo-app'  # Your Docker Hub repository
  FINAL_IMAGE_TAG: '$(Build.BuildId)'    # Unique tag for the final image
  CACHE_TAG: 'cache'                     # Tag for caching layers
  PLATFORMS: 'linux/amd64'               # Define target platforms for multi-arch builds

stages:
- stage: BuildAndDeploy
  jobs:
  - job: BuildWithCache
    pool:
      vmImage: 'ubuntu-latest'  # Use the latest Ubuntu agent

    steps:
    - task: UseNode@1
      inputs:
        version: '14.x'  # Ensure Node.js 14 is installed

    - script: |
        echo "Logging into Docker Hub..."
        echo $(DOCKER_PASSWORD) | docker login -u $(DOCKER_USERNAME) --password-stdin
      displayName: 'Login to Docker Hub'
      env:
        DOCKER_USERNAME: $(DOCKER_USERNAME)  # Add Docker Hub username as a secret variable
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)  # Add Docker Hub password/token as a secret variable

    - script: |
        echo "Setting up Buildx builder..."
        docker buildx create --use --name mybuilder
      displayName: 'Setup Buildx Builder'

    - script: |
        echo "Pulling cached image from Docker Hub..."
        docker pull $(DOCKER_REPO):$(CACHE_TAG) || true
      displayName: 'Pull Cache Image'

    - script: |
        echo "Building Docker image with BuildKit and caching..."
        docker buildx build \
          --cache-from type=registry,ref=$(DOCKER_REPO):$(CACHE_TAG) \
          --cache-to type=registry,ref=$(DOCKER_REPO):$(CACHE_TAG),mode=max \
          --platform $(PLATFORMS) \
          -t $(DOCKER_REPO):$(FINAL_IMAGE_TAG) \
          --push .
      displayName: 'Build and Push Docker Image'

    - script: |
        echo "Running the Docker container locally..."
        docker run -d -p 90:80 $(DOCKER_REPO):$(FINAL_IMAGE_TAG)
      displayName: 'Run Docker Container'

    - script: |
        echo "Deployment successful!"
      condition: succeeded()
      displayName: 'Success Notification'

    - script: |
        echo "Deployment failed!"
      condition: failed()
      displayName: 'Failure Notification'
