trigger:
  branches:
    include:
      - cach

pool:
  vmImage: 'ubuntu-latest'

variables:
  imageName: 'mahmoudalsory/todoapp'
  cacheTag: 'buildcache'
  YARN_CACHE_FOLDER: '$(Pipeline.Workspace)/.yarn-cache'  # Path for Yarn cache
  NODE_MODULES_CACHE_KEY: 'node-modules-v1-$(Agent.OS)-$(HashFiles("yarn.lock"))'  # Cache key for node_modules

steps:
# Step 0: Debugging Step (Optional)
- script: |
    echo "Checking for yarn.lock file..."
    ls -R | grep yarn.lock || echo "yarn.lock not found!"
  displayName: 'Debug: Check for yarn.lock'

# Step 1: Cache Yarn Cache
- task: Cache@2
  inputs:
    key: 'yarn-cache-v1-$(Agent.OS)-$(HashFiles("yarn.lock"))'  # Unique key based on yarn.lock
    restoreKeys: |
      yarn-cache-v1-$(Agent.OS)-
    path: $(YARN_CACHE_FOLDER)
  displayName: 'Cache Yarn Cache'

# Step 2: Cache node_modules
- task: Cache@2
  inputs:
    key: $(NODE_MODULES_CACHE_KEY)  # Unique key based on yarn.lock
    restoreKeys: |
      node-modules-v1-$(Agent.OS)-
    path: '$(System.DefaultWorkingDirectory)/node_modules'
  displayName: 'Cache node_modules'

# Step 3: Install Dependencies
- script: |
    echo "Restoring dependencies..."
    yarn config set cache-folder $(YARN_CACHE_FOLDER)
    yarn install --frozen-lockfile
  displayName: 'Install Dependencies'

# Step 4: Login to Docker Hub
- script: |
    echo "$(DOCKERHUB_PASSWORD)" | docker login -u "$(DOCKERHUB_USERNAME)" --password-stdin
  displayName: 'Login to Docker Hub'

# Step 5: Setup Docker Buildx
- script: |
    docker buildx create --use --name builder
    docker buildx inspect --bootstrap
  displayName: 'Setup Docker Buildx'

# Step 6: Build and Push Docker Image
- script: |
    docker buildx build \
      --builder builder \
      --tag $(imageName):latest \
      --cache-from=type=registry,ref=$(imageName):$(cacheTag) \
      --cache-to=type=registry,ref=$(imageName):$(cacheTag),mode=max \
      --push \
      .
  displayName: 'Build & Push with BuildKit'

# TEMPORARY DEPLOY ON BUILD AGENT
- script: |
    echo "Pulling image and running container locally on agent..."
    docker run -d -p 90:80 --name test-container $(imageName):latest

    echo "Waiting for container to start..."
    sleep 5

    echo "Testing with curl:"
    curl -I http://localhost:90 || echo "App did not respond!"

    echo "Showing container logs:"
    docker logs test-container || true

    echo "Stopping and cleaning up..."
    docker stop test-container && docker rm test-container
  displayName: 'Temporary Deploy & Test Container on Azure Agent'
