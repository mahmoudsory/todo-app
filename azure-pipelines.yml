trigger:
- main

variables:
  dockerImageName: 'todo-app'
  tag: '$(Build.BuildId)'
  DOCKER_BUILDKIT: 1  # Enable BuildKit
  # Use your predefined variables:
  # - DOCKER_USERNAME
  # - DOCKER_PASSWORD (set as secret)

stages:
- stage: Build
  displayName: Build and Push
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: 'ubuntu-latest'  # Free tier Ubuntu agent
    steps:
    - task: DockerInstaller@0
      displayName: 'Install Docker'
    
    # Setup Buildx with Docker Hub login
    - script: |
        docker buildx version || docker buildx install
        docker buildx create --use
        echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
      displayName: 'Setup Buildx and Docker Hub login'
      env:
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
        DOCKER_USERNAME: $(DOCKER_USERNAME)
    
    # Azure Pipeline Cache for node_modules
    - task: Cache@2
      displayName: 'Cache yarn packages'
      inputs:
        key: 'yarn | "$(Agent.OS)" | yarn.lock'
        restoreKeys: |
          yarn | "$(Agent.OS)"
        path: '$(Pipeline.Workspace)/.yarn'
      cacheHitVar: YARN_CACHE_RESTORED
    
    # Restore yarn cache if available
    - script: |
        echo "Restored from cache: $YARN_CACHE_RESTORED"
        if [ "$YARN_CACHE_RESTORED" == "true" ]; then
          mkdir -p node_modules
          cp -r $(Pipeline.Workspace)/.yarn/cache node_modules/
        fi
      displayName: 'Restore yarn cache'
      workingDirectory: '$(Build.SourcesDirectory)'
    
    # Build with multi-layer caching and push to Docker Hub
    - script: |
        docker buildx build \
          --push \
          --cache-from type=registry,ref=$(DOCKER_USERNAME)/$(dockerImageName):buildcache \
          --cache-from type=local,src=/tmp/buildx-cache \
          --cache-to type=registry,ref=$(DOCKER_USERNAME)/$(dockerImageName):buildcache,mode=max \
          --cache-to type=local,dest=/tmp/buildx-cache-new \
          -t $(DOCKER_USERNAME)/$(dockerImageName):$(tag) \
          -t $(DOCKER_USERNAME)/$(dockerImageName):latest \
          .
        
        # Rotate local cache
        rm -rf /tmp/buildx-cache
        mv /tmp/buildx-cache-new /tmp/buildx-cache
      displayName: 'Build and Push with caching'
      env:
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
        DOCKER_USERNAME: $(DOCKER_USERNAME)
    
- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  jobs:
  - job: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-latest'  # Free tier Ubuntu agent
    steps:
    - script: |
        echo "$DOCKER_PASSWORD" | docker login -u $DOCKER_USERNAME --password-stdin
        docker pull $(DOCKER_USERNAME)/$(dockerImageName):latest
        docker run -d -p 90:80 $(DOCKER_USERNAME)/$(dockerImageName):latest
      displayName: 'Pull and Run from Docker Hub'
      env:
        DOCKER_PASSWORD: $(DOCKER_PASSWORD)
        DOCKER_USERNAME: $(DOCKER_USERNAME)
